{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shellyhtcollector2 Gather incoming temperature and humidity updates from a small swarm of Shellyht devices. API documentation Available on the GitHub pages of this repo Architecture overview flowchart LR s1[shellyht] --> w[webserver] <--> d[database] <--> r[reporting tools] s2[shellyht] --> w[webserver] s3[shellyht] --> w[webserver] s4[shellyht] --> w[webserver] Install mariadb connector for Python The mariadb python module is not pure Python and depends on libmariadb , so setup is less straight forward than you would hope: wget https://downloads.mariadb.com/MariaDB/mariadb_repo_setup echo \"d4e4635eeb79b0e96483bd70703209c63da55a236eadd7397f769ee434d92ca8 mariadb_repo_setup\" | sha256sum -c - chmod +x mariadb_repo_setup sudo ./mariadb_repo_setup --mariadb-server-version = \"mariadb-10.6\" sudo apt install libmariadb3 libmariadb-dev sudo python3 -m pip install mariadb Here we have chosen to install it for everyone, but if you used a virtual environment your could do away with the sudo s Install the package Install it directly from PyPi pip install htcollector or alternatively, download it from GitHub git clone https://github.com/varkenvarken/shellyhtcollector2.git Running the server Assuming you have MariaDB running on the same machine with a database (schema) shellyht , and that the user defined in the environment variable DBUSER has enough privileges to create a tables, the following command will create the necessary tables if not yet present and start listening on port 1883 for incoming connections: nohup python3 -m shellyhtcollector -p 1883 & Additional configuration The reporting tools assume that a table StationidToName exists that contains a mapping between StationId and Name. A mapping for a stationid can be added or updated with the mapping tool, for example: cd shellyhtcollector; python3 tools/mapping.py \"shellyht-6A566F\" \"dining room\" Generating reports An html file with the last recorded measurements can be generated with: cd shellyhtcollector; python3 tools/last.py --html > index.html Both commands assume that you have set two environment variables DBUSER DBPASSWORD Implementation details A ShellyHT can be configured to log temperature and humidity changes to a certain host:port using HTTP. The path of a typical GET request will look for example like: /sensorlog?hum=54&temp=23.4&id=shellyht-6A566F The Webserver will only accept GET request that have that exact format.","title":"Home"},{"location":"#shellyhtcollector2","text":"Gather incoming temperature and humidity updates from a small swarm of Shellyht devices.","title":"Shellyhtcollector2"},{"location":"#api-documentation","text":"Available on the GitHub pages of this repo","title":"API documentation"},{"location":"#architecture-overview","text":"flowchart LR s1[shellyht] --> w[webserver] <--> d[database] <--> r[reporting tools] s2[shellyht] --> w[webserver] s3[shellyht] --> w[webserver] s4[shellyht] --> w[webserver]","title":"Architecture overview"},{"location":"#install-mariadb-connector-for-python","text":"The mariadb python module is not pure Python and depends on libmariadb , so setup is less straight forward than you would hope: wget https://downloads.mariadb.com/MariaDB/mariadb_repo_setup echo \"d4e4635eeb79b0e96483bd70703209c63da55a236eadd7397f769ee434d92ca8 mariadb_repo_setup\" | sha256sum -c - chmod +x mariadb_repo_setup sudo ./mariadb_repo_setup --mariadb-server-version = \"mariadb-10.6\" sudo apt install libmariadb3 libmariadb-dev sudo python3 -m pip install mariadb Here we have chosen to install it for everyone, but if you used a virtual environment your could do away with the sudo s","title":"Install mariadb connector for Python"},{"location":"#install-the-package","text":"Install it directly from PyPi pip install htcollector or alternatively, download it from GitHub git clone https://github.com/varkenvarken/shellyhtcollector2.git","title":"Install the package"},{"location":"#running-the-server","text":"Assuming you have MariaDB running on the same machine with a database (schema) shellyht , and that the user defined in the environment variable DBUSER has enough privileges to create a tables, the following command will create the necessary tables if not yet present and start listening on port 1883 for incoming connections: nohup python3 -m shellyhtcollector -p 1883 &","title":"Running the server"},{"location":"#additional-configuration","text":"The reporting tools assume that a table StationidToName exists that contains a mapping between StationId and Name. A mapping for a stationid can be added or updated with the mapping tool, for example: cd shellyhtcollector; python3 tools/mapping.py \"shellyht-6A566F\" \"dining room\"","title":"Additional configuration"},{"location":"#generating-reports","text":"An html file with the last recorded measurements can be generated with: cd shellyhtcollector; python3 tools/last.py --html > index.html Both commands assume that you have set two environment variables DBUSER DBPASSWORD","title":"Generating reports"},{"location":"#implementation-details","text":"A ShellyHT can be configured to log temperature and humidity changes to a certain host:port using HTTP. The path of a typical GET request will look for example like: /sensorlog?hum=54&temp=23.4&id=shellyht-6A566F The Webserver will only accept GET request that have that exact format.","title":"Implementation details"},{"location":"apidoc/shellyhtcollector.Database/","text":"module shellyhtcollector . Database </> Classes Measurement \u2014 Represents a measurement of temperature and humidity by a station. </> MeasurementDatabase \u2014 Implements a databases containing measurements and station descriptions. </> class shellyhtcollector.Database . Measurement ( stationid , temperature , humidity ) </> Represents a measurement of temperature and humidity by a station. Parameters stationid (str) \u2014 station identification. Must contain only 1 or more alphnumeric characters or hyphens temperature (float) \u2014 description humidity (float) \u2014 description Raises ValueError \u2014 if the stationid argument contains illegal characters or temperature or humidity arguments are not compatible to floats class shellyhtcollector.Database . MeasurementDatabase ( database , host , port , user , password ) </> Implements a databases containing measurements and station descriptions. The backing database should be a MariaDB database server. Parameters database (str) \u2014 name of the database host (str) \u2014 hostname or ip-address of teh database server port (str) \u2014 port that the database server is listening on user (str) \u2014 username of a user with access privileges to the database password (str) \u2014 password of the user Methods lastMeasurementsAsHTML ( stationid ) (str) \u2014 Return the last measurement data for a station or all stations in HTML format. </> names ( stationid , name ) (list) \u2014 Insert or replace a name for a stationid, or return a list of all stations._ </> retrieveLastMeasurement ( stationid ) (list) \u2014 Return the last measurement data for a station or all stations. </> retrieveMeasurements ( stationid , starttime , endtime ) (list) \u2014 Get measurements inside a given timeframe. </> storeMeasurement ( measurement ) \u2014 Store a measurement into the database. </> method storeMeasurement ( measurement ) </> Store a measurement into the database. Parameters measurement (Measurement) \u2014 the measurement Measurements do not contain timestamps, the are added automatically. method retrieveMeasurements ( stationid , starttime , endtime=None ) </> Get measurements inside a given timeframe. Parameters stationid (str) \u2014 stationid or asterisk '*' starttime (datetime) \u2014 starttime of measurement period (inclusive) endtime (datetime, optional) \u2014 endtime of measurement period (inclusive) or None for now. Defaults to None. Returns (list) of dict(timestamp:t, stationid:id, temperature:t, humidity:h) method retrieveLastMeasurement ( stationid ) </> Return the last measurement data for a station or all stations. Parameters stationid (str) \u2014 the stationid or an asterisk '*' Returns (list) a list of dict objects, one for each station method lastMeasurementsAsHTML ( stationid ) </> Return the last measurement data for a station or all stations in HTML format. Parameters stationid (str) \u2014 the stationid or an asterisk '*' Returns (str) an HTML page method names ( stationid , name ) </> Insert or replace a name for a stationid, or return a list of all stations._ Parameters stationid (str) \u2014 the shellyht station id or an asterisk '*' name (str) \u2014 the name to associate with a stationid (ignored if stationid is '*') Returns (list) either an empty list when inserting or replacing or a list of tuples(stationid, name)","title":"shellyhtcollector.Database"},{"location":"apidoc/shellyhtcollector.Database/#shellyhtcollectordatabase","text":"</> Classes Measurement \u2014 Represents a measurement of temperature and humidity by a station. </> MeasurementDatabase \u2014 Implements a databases containing measurements and station descriptions. </> class","title":"shellyhtcollector.Database"},{"location":"apidoc/shellyhtcollector.Database/#shellyhtcollectordatabasemeasurement","text":"</> Represents a measurement of temperature and humidity by a station. Parameters stationid (str) \u2014 station identification. Must contain only 1 or more alphnumeric characters or hyphens temperature (float) \u2014 description humidity (float) \u2014 description Raises ValueError \u2014 if the stationid argument contains illegal characters or temperature or humidity arguments are not compatible to floats class","title":"shellyhtcollector.Database.Measurement"},{"location":"apidoc/shellyhtcollector.Database/#shellyhtcollectordatabasemeasurementdatabase","text":"</> Implements a databases containing measurements and station descriptions. The backing database should be a MariaDB database server. Parameters database (str) \u2014 name of the database host (str) \u2014 hostname or ip-address of teh database server port (str) \u2014 port that the database server is listening on user (str) \u2014 username of a user with access privileges to the database password (str) \u2014 password of the user Methods lastMeasurementsAsHTML ( stationid ) (str) \u2014 Return the last measurement data for a station or all stations in HTML format. </> names ( stationid , name ) (list) \u2014 Insert or replace a name for a stationid, or return a list of all stations._ </> retrieveLastMeasurement ( stationid ) (list) \u2014 Return the last measurement data for a station or all stations. </> retrieveMeasurements ( stationid , starttime , endtime ) (list) \u2014 Get measurements inside a given timeframe. </> storeMeasurement ( measurement ) \u2014 Store a measurement into the database. </> method","title":"shellyhtcollector.Database.MeasurementDatabase"},{"location":"apidoc/shellyhtcollector.Database/#shellyhtcollectordatabasemeasurementdatabasestoremeasurement","text":"</> Store a measurement into the database. Parameters measurement (Measurement) \u2014 the measurement Measurements do not contain timestamps, the are added automatically. method","title":"shellyhtcollector.Database.MeasurementDatabase.storeMeasurement"},{"location":"apidoc/shellyhtcollector.Database/#shellyhtcollectordatabasemeasurementdatabaseretrievemeasurements","text":"</> Get measurements inside a given timeframe. Parameters stationid (str) \u2014 stationid or asterisk '*' starttime (datetime) \u2014 starttime of measurement period (inclusive) endtime (datetime, optional) \u2014 endtime of measurement period (inclusive) or None for now. Defaults to None. Returns (list) of dict(timestamp:t, stationid:id, temperature:t, humidity:h) method","title":"shellyhtcollector.Database.MeasurementDatabase.retrieveMeasurements"},{"location":"apidoc/shellyhtcollector.Database/#shellyhtcollectordatabasemeasurementdatabaseretrievelastmeasurement","text":"</> Return the last measurement data for a station or all stations. Parameters stationid (str) \u2014 the stationid or an asterisk '*' Returns (list) a list of dict objects, one for each station method","title":"shellyhtcollector.Database.MeasurementDatabase.retrieveLastMeasurement"},{"location":"apidoc/shellyhtcollector.Database/#shellyhtcollectordatabasemeasurementdatabaselastmeasurementsashtml","text":"</> Return the last measurement data for a station or all stations in HTML format. Parameters stationid (str) \u2014 the stationid or an asterisk '*' Returns (str) an HTML page method","title":"shellyhtcollector.Database.MeasurementDatabase.lastMeasurementsAsHTML"},{"location":"apidoc/shellyhtcollector.Database/#shellyhtcollectordatabasemeasurementdatabasenames","text":"</> Insert or replace a name for a stationid, or return a list of all stations._ Parameters stationid (str) \u2014 the shellyht station id or an asterisk '*' name (str) \u2014 the name to associate with a stationid (ignored if stationid is '*') Returns (list) either an empty list when inserting or replacing or a list of tuples(stationid, name)","title":"shellyhtcollector.Database.MeasurementDatabase.names"},{"location":"apidoc/shellyhtcollector.Server/","text":"module shellyhtcollector . Server </> Classes InterceptorHandlerFactory \u2014 Provides a single handler that returns an InterceptorHandler(BaseHTTPRequestHandler) that writes measurements to the provided MeasurementDatabase. </> Interceptor \u2014 Mix-in class to handle each request in a new thread. </> class shellyhtcollector.Server . InterceptorHandlerFactory ( ) </> Provides a single handler that returns an InterceptorHandler(BaseHTTPRequestHandler) that writes measurements to the provided MeasurementDatabase. class shellyhtcollector.Server . Interceptor ( server_address , db ) </> Bases http.server.ThreadingHTTPServer socketserver.ThreadingMixIn http.server.HTTPServer socketserver.TCPServer socketserver.BaseServer Mix-in class to handle each request in a new thread. Methods close_request ( request ) \u2014 Called to clean up an individual request. </> fileno ( ) \u2014 Return socket file number. </> finish_request ( request , client_address ) \u2014 Finish one request by instantiating RequestHandlerClass. </> get_request ( ) \u2014 Get the request and client address from the socket. </> handle_error ( request , client_address ) \u2014 Handle an error gracefully. May be overridden. </> handle_request ( ) \u2014 Handle one request, possibly blocking. </> handle_timeout ( ) \u2014 Called if no new request arrives within self.timeout. </> process_request ( request , client_address ) \u2014 Start a new thread to process the request. </> process_request_thread ( request , client_address ) \u2014 Same as in BaseServer but as a thread. </> serve_forever ( poll_interval ) \u2014 Handle one request at a time until shutdown. </> server_activate ( ) \u2014 Called by constructor to activate the server. </> server_bind ( ) \u2014 Override server_bind to store the server name. </> service_actions ( ) \u2014 Called by the serve_forever() loop. </> shutdown ( ) \u2014 Stops the serve_forever loop. </> shutdown_request ( request ) \u2014 Called to shutdown and close an individual request. </> verify_request ( request , client_address ) \u2014 Verify the request. May be overridden. </> method serve_forever ( poll_interval=0.5 ) </> Handle one request at a time until shutdown. Polls for shutdown every poll_interval seconds. Ignores self.timeout. If you need to do periodic tasks, do them in another thread. method shutdown ( ) </> Stops the serve_forever loop. Blocks until the loop has finished. This must be called while serve_forever() is running in another thread, or it will deadlock. method service_actions ( ) </> Called by the serve_forever() loop. May be overridden by a subclass / Mixin to implement any code that needs to be run during the loop. method handle_request ( ) </> Handle one request, possibly blocking. Respects self.timeout. method handle_timeout ( ) </> Called if no new request arrives within self.timeout. Overridden by ForkingMixIn. method verify_request ( request , client_address ) </> Verify the request. May be overridden. Return True if we should proceed with this request. method finish_request ( request , client_address ) </> Finish one request by instantiating RequestHandlerClass. method handle_error ( request , client_address ) </> Handle an error gracefully. May be overridden. The default is to print a traceback and continue. method server_activate ( ) </> Called by constructor to activate the server. May be overridden. method fileno ( ) </> Return socket file number. Interface required by selector. method get_request ( ) </> Get the request and client address from the socket. May be overridden. method shutdown_request ( request ) </> Called to shutdown and close an individual request. method close_request ( request ) </> Called to clean up an individual request. method process_request_thread ( request , client_address ) </> Same as in BaseServer but as a thread. In addition, exception handling is done here. method process_request ( request , client_address ) </> Start a new thread to process the request. method server_bind ( ) </> Override server_bind to store the server name.","title":"shellyhtcollector.Server"},{"location":"apidoc/shellyhtcollector.Server/#shellyhtcollectorserver","text":"</> Classes InterceptorHandlerFactory \u2014 Provides a single handler that returns an InterceptorHandler(BaseHTTPRequestHandler) that writes measurements to the provided MeasurementDatabase. </> Interceptor \u2014 Mix-in class to handle each request in a new thread. </> class","title":"shellyhtcollector.Server"},{"location":"apidoc/shellyhtcollector.Server/#shellyhtcollectorserverinterceptorhandlerfactory","text":"</> Provides a single handler that returns an InterceptorHandler(BaseHTTPRequestHandler) that writes measurements to the provided MeasurementDatabase. class","title":"shellyhtcollector.Server.InterceptorHandlerFactory"},{"location":"apidoc/shellyhtcollector.Server/#shellyhtcollectorserverinterceptor","text":"</> Bases http.server.ThreadingHTTPServer socketserver.ThreadingMixIn http.server.HTTPServer socketserver.TCPServer socketserver.BaseServer Mix-in class to handle each request in a new thread. Methods close_request ( request ) \u2014 Called to clean up an individual request. </> fileno ( ) \u2014 Return socket file number. </> finish_request ( request , client_address ) \u2014 Finish one request by instantiating RequestHandlerClass. </> get_request ( ) \u2014 Get the request and client address from the socket. </> handle_error ( request , client_address ) \u2014 Handle an error gracefully. May be overridden. </> handle_request ( ) \u2014 Handle one request, possibly blocking. </> handle_timeout ( ) \u2014 Called if no new request arrives within self.timeout. </> process_request ( request , client_address ) \u2014 Start a new thread to process the request. </> process_request_thread ( request , client_address ) \u2014 Same as in BaseServer but as a thread. </> serve_forever ( poll_interval ) \u2014 Handle one request at a time until shutdown. </> server_activate ( ) \u2014 Called by constructor to activate the server. </> server_bind ( ) \u2014 Override server_bind to store the server name. </> service_actions ( ) \u2014 Called by the serve_forever() loop. </> shutdown ( ) \u2014 Stops the serve_forever loop. </> shutdown_request ( request ) \u2014 Called to shutdown and close an individual request. </> verify_request ( request , client_address ) \u2014 Verify the request. May be overridden. </> method","title":"shellyhtcollector.Server.Interceptor"},{"location":"apidoc/shellyhtcollector.Server/#socketserverbaseserverserve_forever","text":"</> Handle one request at a time until shutdown. Polls for shutdown every poll_interval seconds. Ignores self.timeout. If you need to do periodic tasks, do them in another thread. method","title":"socketserver.BaseServer.serve_forever"},{"location":"apidoc/shellyhtcollector.Server/#socketserverbaseservershutdown","text":"</> Stops the serve_forever loop. Blocks until the loop has finished. This must be called while serve_forever() is running in another thread, or it will deadlock. method","title":"socketserver.BaseServer.shutdown"},{"location":"apidoc/shellyhtcollector.Server/#socketserverbaseserverservice_actions","text":"</> Called by the serve_forever() loop. May be overridden by a subclass / Mixin to implement any code that needs to be run during the loop. method","title":"socketserver.BaseServer.service_actions"},{"location":"apidoc/shellyhtcollector.Server/#socketserverbaseserverhandle_request","text":"</> Handle one request, possibly blocking. Respects self.timeout. method","title":"socketserver.BaseServer.handle_request"},{"location":"apidoc/shellyhtcollector.Server/#socketserverbaseserverhandle_timeout","text":"</> Called if no new request arrives within self.timeout. Overridden by ForkingMixIn. method","title":"socketserver.BaseServer.handle_timeout"},{"location":"apidoc/shellyhtcollector.Server/#socketserverbaseserververify_request","text":"</> Verify the request. May be overridden. Return True if we should proceed with this request. method","title":"socketserver.BaseServer.verify_request"},{"location":"apidoc/shellyhtcollector.Server/#socketserverbaseserverfinish_request","text":"</> Finish one request by instantiating RequestHandlerClass. method","title":"socketserver.BaseServer.finish_request"},{"location":"apidoc/shellyhtcollector.Server/#socketserverbaseserverhandle_error","text":"</> Handle an error gracefully. May be overridden. The default is to print a traceback and continue. method","title":"socketserver.BaseServer.handle_error"},{"location":"apidoc/shellyhtcollector.Server/#socketservertcpserverserver_activate","text":"</> Called by constructor to activate the server. May be overridden. method","title":"socketserver.TCPServer.server_activate"},{"location":"apidoc/shellyhtcollector.Server/#socketservertcpserverfileno","text":"</> Return socket file number. Interface required by selector. method","title":"socketserver.TCPServer.fileno"},{"location":"apidoc/shellyhtcollector.Server/#socketservertcpserverget_request","text":"</> Get the request and client address from the socket. May be overridden. method","title":"socketserver.TCPServer.get_request"},{"location":"apidoc/shellyhtcollector.Server/#socketservertcpservershutdown_request","text":"</> Called to shutdown and close an individual request. method","title":"socketserver.TCPServer.shutdown_request"},{"location":"apidoc/shellyhtcollector.Server/#socketservertcpserverclose_request","text":"</> Called to clean up an individual request. method","title":"socketserver.TCPServer.close_request"},{"location":"apidoc/shellyhtcollector.Server/#socketserverthreadingmixinprocess_request_thread","text":"</> Same as in BaseServer but as a thread. In addition, exception handling is done here. method","title":"socketserver.ThreadingMixIn.process_request_thread"},{"location":"apidoc/shellyhtcollector.Server/#socketserverthreadingmixinprocess_request","text":"</> Start a new thread to process the request. method","title":"socketserver.ThreadingMixIn.process_request"},{"location":"apidoc/shellyhtcollector.Server/#httpserverhttpserverserver_bind","text":"</> Override server_bind to store the server name.","title":"http.server.HTTPServer.server_bind"},{"location":"apidoc/shellyhtcollector.Utils/","text":"module shellyhtcollector . Utils </> Classes DatetimeEncoder \u2014 Extensible JSON http://json.org encoder for Python data structures. </> class shellyhtcollector.Utils . DatetimeEncoder ( skipkeys=False , ensure_ascii=True , check_circular=True , allow_nan=True , sort_keys=False , indent=None , separators=None , default=None ) </> Bases json.encoder.JSONEncoder Extensible JSON http://json.org encoder for Python data structures. Supports the following objects and types by default: +-------------------+---------------+ | Python | JSON | +===================+===============+ | dict | object | +-------------------+---------------+ | list, tuple | array | +-------------------+---------------+ | str | string | +-------------------+---------------+ | int, float | number | +-------------------+---------------+ | True | true | +-------------------+---------------+ | False | false | +-------------------+---------------+ | None | null | +-------------------+---------------+ To extend this to recognize other objects, subclass and implement a .default() method with another method that returns a serializable object for o if possible, otherwise it should call the superclass implementation (to raise TypeError ). Methods default ( obj ) \u2014 Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). </> encode ( o ) \u2014 Return a JSON string representation of a Python data structure. </> iterencode ( o , _one_shot ) \u2014 Encode the given object and yield each string representation as available. </> method encode ( o ) </> Return a JSON string representation of a Python data structure. >>> from json.encoder import JSONEncoder >>> JSONEncoder () . encode ({ \"foo\" : [ \"bar\" , \"baz\" ]}) '{\"foo\": [\"bar\", \"baz\"]}' method iterencode ( o , _one_shot=False ) </> Encode the given object and yield each string representation as available. For example:: for chunk in JSONEncoder () . iterencode ( bigobject ) : mysocket . write ( chunk ) method default ( obj ) </> Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). For example, to support arbitrary iterators, you could implement default like this:: def default ( self , o ) : try : iterable = iter ( o ) except TypeError : pass else : return list ( iterable ) # Let the base class default method raise the TypeError return JSONEncoder . default ( self , o )","title":"shellyhtcollector.Utils"},{"location":"apidoc/shellyhtcollector.Utils/#shellyhtcollectorutils","text":"</> Classes DatetimeEncoder \u2014 Extensible JSON http://json.org encoder for Python data structures. </> class","title":"shellyhtcollector.Utils"},{"location":"apidoc/shellyhtcollector.Utils/#shellyhtcollectorutilsdatetimeencoder","text":"</> Bases json.encoder.JSONEncoder Extensible JSON http://json.org encoder for Python data structures. Supports the following objects and types by default: +-------------------+---------------+ | Python | JSON | +===================+===============+ | dict | object | +-------------------+---------------+ | list, tuple | array | +-------------------+---------------+ | str | string | +-------------------+---------------+ | int, float | number | +-------------------+---------------+ | True | true | +-------------------+---------------+ | False | false | +-------------------+---------------+ | None | null | +-------------------+---------------+ To extend this to recognize other objects, subclass and implement a .default() method with another method that returns a serializable object for o if possible, otherwise it should call the superclass implementation (to raise TypeError ). Methods default ( obj ) \u2014 Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). </> encode ( o ) \u2014 Return a JSON string representation of a Python data structure. </> iterencode ( o , _one_shot ) \u2014 Encode the given object and yield each string representation as available. </> method","title":"shellyhtcollector.Utils.DatetimeEncoder"},{"location":"apidoc/shellyhtcollector.Utils/#jsonencoderjsonencoderencode","text":"</> Return a JSON string representation of a Python data structure. >>> from json.encoder import JSONEncoder >>> JSONEncoder () . encode ({ \"foo\" : [ \"bar\" , \"baz\" ]}) '{\"foo\": [\"bar\", \"baz\"]}' method","title":"json.encoder.JSONEncoder.encode"},{"location":"apidoc/shellyhtcollector.Utils/#jsonencoderjsonencoderiterencode","text":"</> Encode the given object and yield each string representation as available. For example:: for chunk in JSONEncoder () . iterencode ( bigobject ) : mysocket . write ( chunk ) method","title":"json.encoder.JSONEncoder.iterencode"},{"location":"apidoc/shellyhtcollector.Utils/#shellyhtcollectorutilsdatetimeencoderdefault","text":"</> Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). For example, to support arbitrary iterators, you could implement default like this:: def default ( self , o ) : try : iterable = iter ( o ) except TypeError : pass else : return list ( iterable ) # Let the base class default method raise the TypeError return JSONEncoder . default ( self , o )","title":"shellyhtcollector.Utils.DatetimeEncoder.default"},{"location":"apidoc/shellyhtcollector/","text":"package shellyhtcollector </> This package can be invoked as a module. Example nohup python -m shellyhtcollector -p 1883 & If invoked this way, it will start listening for data on port 1883. For more info run it with the -- help option python -m shellyhtcollector --help","title":"shellyhtcollector"},{"location":"apidoc/shellyhtcollector/#shellyhtcollector","text":"</> This package can be invoked as a module. Example nohup python -m shellyhtcollector -p 1883 & If invoked this way, it will start listening for data on port 1883. For more info run it with the -- help option python -m shellyhtcollector --help","title":"shellyhtcollector"},{"location":"apidoc/source/shellyhtcollector.Database/","text":"SOURCE CODE shellyhtcollector. Database DOCS # shellyhtcollector, a python module to process sensor readings from Shelly H&T devices # # (C) 2022 Michel Anders (varkenvarken) # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, # MA 02110-1301, USA. # # version: 20220807130406 import re import mariadb from datetime import datetime , timedelta from dateutil import tz class Measurement : DOCS \"\"\" Represents a measurement of temperature and humidity by a station. Args: stationid (str): station identification. Must contain only 1 or more alphnumeric characters or hyphens temperature (float): _description_ humidity (float): _description_ Raises: ValueError: if the stationid argument contains illegal characters or temperature or humidity arguments are not compatible to floats \"\"\" idchars = re . compile ( r \"^[a-z01-9-]+$\" , re . IGNORECASE ) def __init__ ( self , stationid , temperature , humidity ): if re . match ( self . idchars , stationid ): self . stationid = stationid else : raise ValueError ( \"stationid argument contains illegal characters\" ) try : self . temperature = float ( temperature ) self . humidity = float ( humidity ) except ValueError as e : e . args = ( \"temperature and humidity arguments most be floats or convertible to floats\" , ) raise e def __repr__ ( self ): return f 'Measurement(\" { self . stationid } \", { self . temperature } , { self . humidity } )' class MeasurementDatabase : DOCS \"\"\" Implements a databases containing measurements and station descriptions. The backing database should be a MariaDB database server. Args: database (str): name of the database host (str): hostname or ip-address of teh database server port (str): port that the database server is listening on user (str): username of a user with access privileges to the database password (str): password of the user \"\"\" def __init__ ( self , database , host , port , user , password ): self . connection = mariadb . connect ( user = user , password = password , host = host , database = database ) self . connection . auto_reconnect = True cursor = self . connection . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS Measurements( Timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, Stationid VARCHAR(100), Temperature REAL, Humidity REAL);\"\"\" ) cursor . execute ( \"\"\"CREATE INDEX IF NOT EXISTS ts ON Measurements(Timestamp);\"\"\" ) cursor . execute ( \"\"\"CREATE INDEX IF NOT EXISTS si ON Measurements(Stationid);\"\"\" ) cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS StationidToName( Stationid VARCHAR(100) NOT NULL PRIMARY KEY, Name TEXT NOT NULL);\"\"\" ) def storeMeasurement ( self , measurement ): DOCS \"\"\" Store a measurement into the database. Args: measurement (Measurement): the measurement Measurements do not contain timestamps, the are added automatically. \"\"\" cursor = self . connection . cursor () cursor . execute ( \"\"\"INSERT INTO Measurements(Stationid, Temperature, Humidity) VALUES (?,?,?)\"\"\" , ( measurement . stationid , measurement . temperature , measurement . humidity , ), ) self . connection . commit () n = cursor . rowcount cursor . close () return n def retrieveMeasurements ( DOCS self , stationid , starttime : datetime , endtime : datetime = None ): \"\"\" Get measurements inside a given timeframe. Args: stationid (str): stationid or asterisk '*' starttime (datetime): starttime of measurement period (inclusive) endtime (datetime, optional): endtime of measurement period (inclusive) or None for now. Defaults to None. Returns: list: of dict(timestamp:t, stationid:id, temperature:t, humidity:h) \"\"\" # timestamp in MariaDB are stored in UTC endtime = ( endtime . astimezone ( tz . UTC ) if endtime is not None else datetime . now ( tz = tz . UTC ) ) starttime = starttime . astimezone ( tz . UTC ) if stationid == \"*\" : cursor = self . connection . cursor ( dictionary = True ) cursor . execute ( f \"\"\"SELECT Timestamp, Stationid, Temperature, Humidity FROM Measurements WHERE Timestamp >= ? AND Timestamp <= ?\"\"\" , ( starttime , endtime , ), ) rows = cursor . fetchall () else : cursor = self . connection . cursor ( dictionary = True ) cursor . execute ( f \"\"\"SELECT Timestamp, Stationid, Temperature, Humidity FROM Measurements WHERE Stationid = ? AND Timestamp >= ? AND Timestamp <= ?\"\"\" , ( stationid , starttime , endtime , ), ) rows = cursor . fetchall () # mariadb / mysql timestamps are in UTC rows = [ { \"timestamp\" : row [ 0 ] . astimezone ( tz . tzlocal ()), \"stationid\" : row [ 1 ], \"temperature\" : row [ 2 ], \"humidity\" : row [ 3 ], } for row in rows ] return rows def retrieveLastMeasurement ( self , stationid ): DOCS \"\"\" Return the last measurement data for a station or all stations. Args: stationid (str): the stationid or an asterisk '*' Returns: list: a list of dict objects, one for each station \"\"\" if stationid == \"*\" : rows = [] cursor = self . connection . cursor ( dictionary = True ) cursor . execute ( \"SELECT DISTINCT(Stationid) FROM Measurements\" ) for row in cursor . fetchall (): rows . extend ( self . retrieveLastMeasurement ( row [ 0 ])) else : # get the data # TODO return data with name == \"unknown\" if mapping is not available cursor = self . connection . cursor ( dictionary = True ) cursor . execute ( \"\"\"SELECT Timestamp as 'Timestamp [timestamp]', Measurements.Stationid, Name, Temperature, Humidity FROM Measurements, StationidToName WHERE Measurements.Stationid = ? AND Measurements.Stationid = StationidToName.Stationid ORDER BY timestamp DESC LIMIT 1;\"\"\" , ( stationid ,), ) rows = cursor . fetchall () print ( rows ) rows = [ { \"time\" : row [ 0 ], # .replace(tzinfo=utc).astimezone(ltz), \"deltat\" : datetime . now () - row [ 0 ], \"stationid\" : row [ 1 ], \"name\" : row [ 2 ], \"temperature\" : row [ 3 ], \"humidity\" : row [ 4 ], } for row in rows ] return rows def lastMeasurementsAsHTML ( self , stationid ): DOCS \"\"\" Return the last measurement data for a station or all stations in HTML format. Args: stationid (str): the stationid or an asterisk '*' Returns: str: an HTML page \"\"\" ms = self . retrieveLastMeasurement ( stationid ) mdivs = \" \\n \" . join ( f \"\"\" <div class=\"measurement { ' late' if m [ 'deltat' ] . total_seconds () > 24 * 3600 else '' } \" id=\" { m [ \"stationid\" ] } \"> <div class=\"station\"> { m [ \"name\" ] } </div> <div class=\"time\" data-time=\" { m [ \"time\" ] } \"> { m [ 'time' ] : %H:%M } </div> <div class=\"temp\"> { m [ \"temperature\" ] : .1f } <span class=\"degrees\">\u00b0C</span></div> <div class=\"hum\"> { m [ \"humidity\" ] : .0f } <span class=percent>%</span></div> </div>\"\"\" for m in ms ) style = \"\"\" .body {width:100%; } .measurements {width: 90%;} .measurement {float:left; width:200px;} .station {float:left; font-size:16pt;} .time {float:left; font-size:12pt;} .temp {float:left; clear:both; font-size:40pt;} .hum {float:left; font-size:12pt;} .late { background-color:red; } \"\"\" return f \"\"\"<html> <head><meta charset=\"UTF-8\"><meta http-equiv=\"refresh\" content=\"300\"><title>Temperatuur binnen</title> <style> { style } </style> </head> <body> <div class=\"measurements\"> { mdivs } </div> </body> </html> \"\"\" def retrieveMeasurementsLast24Hours ( self , stationid ): ltz = tz . tzlocal () d = timedelta ( hours = 24 ) end = datetime . now ( tz = ltz ) start = end - d return self . retrieveMeasurements ( stationid , start , end ) def names ( self , stationid , name ): DOCS \"\"\" Insert or replace a name for a stationid, or return a list of all stations._ Args: stationid (str): the shellyht station id or an asterisk '*' name (str)): the name to associate with a stationid (ignored if stationid is '*') Returns: list: either an empty list when inserting or replacing or a list of tuples(stationid, name) \"\"\" if stationid == \"*\" : conn = self . connection cursor = conn . cursor ( dictionary = True ) cursor . execute ( \"SELECT * FROM StationidToName\" ) return [( row [ 0 ], row [ 1 ]) for row in cursor . fetchall ()] else : conn = self . connection cursor = conn . cursor () cursor . execute ( \"REPLACE StationidToName(Stationid, Name) VALUES(?,?)\" , ( stationid , name ), ) conn . commit () return []","title":"shellyhtcollector.Database"},{"location":"apidoc/source/shellyhtcollector.Server/","text":"SOURCE CODE shellyhtcollector. Server DOCS # shellyhtcollector, a python module to process sensor readings from Shelly H&T devices # # (C) 2022 Michel Anders (varkenvarken) # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, # MA 02110-1301, USA. # # version: 20220806080222 import re from http import HTTPStatus from http.server import BaseHTTPRequestHandler , ThreadingHTTPServer from .Database import Measurement class InterceptorHandlerFactory : DOCS \"\"\" Provides a single handler that returns an InterceptorHandler(BaseHTTPRequestHandler) that writes measurements to the provided MeasurementDatabase. \"\"\" @staticmethod def getHandler ( db ): class InterceptorHandler ( BaseHTTPRequestHandler ): querypattern = re . compile ( r \"^/sensorlog\\?hum=(?P<humidity>\\d+(\\.\\d+)?)\\&temp=(?P<temperature>\\d+(\\.\\d+)?)\\&id=(?P<stationid>[a-z01-9-]+)$\" , re . IGNORECASE , ) def do_GET ( self ): print ( self . path ) if m := re . match ( self . querypattern , self . path ): print ( \"match\" , m . groupdict ()) try : measurement = Measurement ( m . group ( \"stationid\" ), m . group ( \"temperature\" ), m . group ( \"humidity\" ), ) db . storeMeasurement ( measurement ) self . send_response ( HTTPStatus . OK ) except Exception as e : print ( e ) self . send_response ( HTTPStatus . INTERNAL_SERVER_ERROR ) raise else : self . send_response ( HTTPStatus . FORBIDDEN ) self . end_headers () return InterceptorHandler class Interceptor ( ThreadingHTTPServer ): DOCS allow_reuse_address = True def __init__ ( self , server_address , db ): super () . __init__ ( server_address , InterceptorHandlerFactory . getHandler ( db ))","title":"shellyhtcollector.Server"},{"location":"apidoc/source/shellyhtcollector.Utils/","text":"SOURCE CODE shellyhtcollector. Utils DOCS # shellyhtcollector, a python module to process sensor readings from Shelly H&T devices # # (C) 2022 Michel Anders (varkenvarken) # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, # MA 02110-1301, USA. # # version: 20220805094810 import json from datetime import datetime , timedelta class DatetimeEncoder ( json . JSONEncoder ): DOCS def default ( self , obj ): DOCS if isinstance ( obj , datetime ): return obj . isoformat () if isinstance ( obj , timedelta ): return str ( obj ) # Let the base class default method raise the TypeError return json . JSONEncoder . default ( self , obj )","title":"shellyhtcollector.Utils"},{"location":"apidoc/source/shellyhtcollector/","text":"SOURCE CODE shellyhtcollector DOCS # shellyhtcollector, a python module to process sensor readings from Shelly H&T devices # # (C) 2022 Michel Anders (varkenvarken) # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, # MA 02110-1301, USA. # # version: 20220806152902 # pylnlib : a package to communicate with a model railroad controller using the LocoNet\u00ae protocol # # (c) 2022 Michel Anders (varkenvarken) # # License: GPL 3, see file LICENSE # # Version: 20220806152902 \"\"\" This package can be invoked as a module. Example: ```bash nohup python -m shellyhtcollector -p 1883 & ``` If invoked this way, it will start listening for data on port 1883. For more info run it with the -- help option ```bash python -m shellyhtcollector --help ``` \"\"\"","title":"shellyhtcollector"}]}